/* SPDX-License-Identifier: GPL-2.0-only */
/*
 * Copyright (c) 2023 Meta Platforms, Inc. and affiliates.
 */

#pragma once

#include <stddef.h>
#include <stdint.h>

/**
 * @file prog.h
 *
 * This module defines `bf_test_prog` to manipulate a BPF program generated by
 * `bpfilter`.
 *
 * Once a `bf_test_prog` object has been created, use `bf_test_prog_open()` to
 * link it to a BPF program attach to the system using the program's name.
 */

#define _free_bf_test_prog_ __attribute__((__cleanup__(bf_test_prog_free)))

struct bf_test_prog
{
    int fd;
};

struct bf_test_prog *bf_test_prog_get(const char *name);

int bf_test_prog_new(struct bf_test_prog **prog);
void bf_test_prog_free(struct bf_test_prog **prog);
int bf_test_prog_open(struct bf_test_prog *prog, const char *name);

/**
 * Call `BPF_PROG_TEST_RUN` on the program.
 *
 * @param prog Program to test run. Can't be NULL.
 * @param expect Expected return value of the program, depends on the program
 *        type.
 * @param pkt Raw packet data to send to the program. Can't be NULL.
 * @param pkt_len Length of @p pkt.
 * @return
 * - 0 if the call succeeded and the BPF program's return value is equal to
 *   @p expect.
 * - < 0 if the call failed.
 * - > 0 if the call succeeded but the BPF program's return value is different
 *   from @p expect.
 */
int bf_test_prog_run(const struct bf_test_prog *prog, uint32_t expect,
                     void *pkt, size_t pkt_len);
